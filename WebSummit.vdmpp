class WebSummit
types
	public WSAccount = seq of Transaction;
	public WSWaitingList = set of User`UserName;
	public WSAttendees = map User`UserName to User;
	public WSTicketType = <Company> | <Attendee> | <Volunteer>;
	public WSTicketStock = map WSTicketType to nat;
	public WSTicketPrice = map WSTicketType to nat;
	public WSVenues = map Venue`VenueName to Venue;
	public WSConferences = map Conference`ConfName to Conference;
	public WSTalks = map Talk`TalkTitle to Talk;
	public WSWorkshops = map Workshop`WorkshopName to Workshop;
	public WSNews = map News`NewsTitle to News;
instance variables
	private Account : WSAccount := [];
	public WaitingList : WSWaitingList := {};
	public Attendees : WSAttendees := { |-> };
	private TicketStock : WSTicketStock;
	private TicketPrice : WSTicketPrice;
	public Conferences : WSConferences := { |-> };
	public Workshops : WSWorkshops := { |-> };
	public Venues : WSVenues := { |-> };
	public Talks : WSTalks := { |-> };
	public News : WSNews := { |-> };
operations
	-- Constructor
	public WebSummit: WSTicketStock * WSTicketPrice ==> WebSummit
	WebSummit(tickets, price) == (
		TicketStock := tickets;
		TicketPrice := price;
		return self
	);

	-- Sell a ticket 
	public SellTicket: User`UserName * WSTicketType ==> ()
	SellTicket(name, ticket) == (
		TicketStock(ticket) := TicketStock(ticket) - 1;
		Account := [new Transaction(TicketPrice(ticket))] ^ Account;
		Attendees := Attendees ++ { name |-> new User(name, ticket)};
	)
	pre not ticket = <Volunteer> and TicketStock(ticket) > 0
	post (
		card dom Attendees >= card dom Attendees~ 
		and TicketStock(ticket) = TicketStock~(ticket) - 1 
		and len Account = len Account~ + 1
	);

	-- Retrieve the account balance
	public GetAccountBalance: () ==> int
	GetAccountBalance() == (
		return new Utils().SumSeq([t.Amount | t in seq Account]);
	);
	
	-- Register an attendee
	public RegisterAttendee: User`UserName ==> ()
	RegisterAttendee(name) == (
		Attendees(name).State := <Registered>
	)
	pre Attendees(name).Type = <Attendee> and Attendees(name).State = <Unregistered>
	post Attendees(name).Type = <Attendee> and Attendees(name).State = <Registered>;
	
	-- Add a potential volunteer to the waiting list
	public AddToWaitingList: User`UserName ==> ()
	AddToWaitingList(name) == (
		 WaitingList := WaitingList union { name }
	)
	pre name not in set dom Attendees
	post card WaitingList >= card WaitingList~;
	
	-- Accept a volunteer from the waiting list
	public AcceptVolunteer: User`UserName ==> ()
	AcceptVolunteer(name) == (
		Attendees := Attendees ++ { name |-> new User(name, <Volunteer>)}
	)
	pre name in set WaitingList and name not in set dom Attendees
	post name in set dom Attendees;
	
	-- Register a volunteer
	public RegisterVolunteer: User`UserName ==> ()
	RegisterVolunteer(name) == (
		Attendees(name).State := <Registered>
	)
	pre Attendees(name).Type = <Volunteer> and Attendees(name).State = <Unregistered>
	post Attendees(name).Type = <Volunteer> and Attendees(name).State = <Registered>;
	
	-- Get the total number of ticket holders (volunteers included)
	public GetNumberOfAttendees: () ==> nat
	GetNumberOfAttendees() == ( 
		return card dom Attendees;
	)
	post RESULT = card dom Attendees;
	
	-- Get the actual total number of attendees (volunteers included)
	public GetNumberOfRegisteredAttendees: () ==> nat
	GetNumberOfRegisteredAttendees() == (
		return card { user | user in set rng Attendees & user.State = <Registered> };
	)
	post RESULT = card { user | user in set rng Attendees & user.State = <Registered>};
	
	-- Schedule a venue for the event
	public ScheduleVenue: Venue`VenueName * Date * Date * nat ==> ()
	ScheduleVenue(name, startDate, endDate, rent) == (
		Account := [new Transaction(-rent)] ^ Account;
		Venues := Venues ++ { name |-> new Venue(name, startDate, endDate) };
	)
	post name in set dom Venues and card dom Venues >= card dom Venues~;
	
	-- Schedule a conference 
	public ScheduleConference: Venue`VenueName * Conference`ConfName * Date * Date ==> ()
	ScheduleConference(venue, conf, startDate, endDate) == (
		Conferences := Conferences ++ { conf |-> new Conference(conf, venue, startDate, endDate) }
	)
	pre (
		venue in set dom Venues
		and startDate.IsLaterThan(Venues(venue).Start)
		and endDate.IsEarlierThan(Venues(venue).End)
		and Venues(venue).IsFree(startDate, endDate, Conferences)
	)
	post conf in set dom Conferences;
	
	-- Schedule a talk
	public ScheduleTalk: Conference`ConfName * Talk`TalkTitle * User`UserName * Date * Time * Time ==> ()
	ScheduleTalk(conf, title, speaker, date, startTime, endTime) == (
		Talks := Talks ++ { title |-> new Talk(title, conf, speaker, date, startTime, endTime) };
	)
	pre (
		conf in set dom Conferences
		and speaker in set dom Attendees
		and date.IsLaterThan(Conferences(conf).Start)
		and date.IsEarlierThan(Conferences(conf).End)
		and Conferences(conf).IsFree(date, startTime, endTime, Talks)
	)
	post (
		title in set dom Talks
	);
	
	-- Retrieve all the talks from a specific day
	public GetTalksOfDay: Date ==> set of Talk
	GetTalksOfDay(date) == (
		return { talk | talk in set rng Talks & talk.Date.Equals(date) };
	)
	post Talks = Talks~;
	
	-- Retrieve all the talks happening at a specific hour of a day
	public GetTalksAtTime: Date * Time ==> set of Talk
	GetTalksAtTime(date, time) == (
		return { talk | talk in set rng Talks & talk.Date.Equals(date) and time.IsLaterThan(talk.Start) and time.IsEarlierThan(talk.End) }
	)
	post Talks = Talks~;
	
	-- Retrieve all the talks given by a speaker
	public GetTalksOfSpeaker: User`UserName ==> set of Talk
	GetTalksOfSpeaker(speaker) == (
		return { talk | talk in set rng Talks & talk.Speaker = speaker };
	)
	post Talks = Talks~;
	
	-- Retrieve all the talks from a specific conference for a specific day
	public GetConferenceTalksOfDay: Conference`ConfName * Date ==> set of Talk
	GetConferenceTalksOfDay(conference, date) == (
		return { talk | talk in set rng Talks & talk.Conference = conference and talk.Date.Equals(date) }
	)
	post Talks = Talks~;
	
	-- Retrieve all the conferences of a day
	public GetConferencesOfDay: Date ==> set of Conference
	GetConferencesOfDay(date) == (
		return { conf | conf in set rng Conferences & date.IsLaterThan(conf.Start) and date.IsEarlierThan(conf.End) }
	)
	post Conferences = Conferences~;
	
	-- Retrieve venue where conference is taking place
	public GetConferenceVenue: Conference`ConfName ==> Venue
	GetConferenceVenue(conf) == (
		return Venues(Conferences(conf).Venue);
	)
	pre conf in set dom Conferences;
	
	-- Schedule a workshop
	public ScheduleWorkshop: Workshop`WorkshopName * Workshop`WorkshopSubject * Venue`VenueName * Workshop`WorkshopCompany * Date * Time * Time * nat ==> ()
	ScheduleWorkshop(name, subject, venue, company, date, startTime, endTime, vacancies) == (
	   Workshops := Workshops ++ { name |-> new Workshop(name, subject, venue, company, date, startTime, endTime, vacancies) }
	)
	pre (
	 name not in set dom Workshops
	 and venue in set dom Venues
	 and date.IsLaterThan(Venues(venue).Start)
	 and date.IsEarlierThan(Venues(venue).End)
	)
	post name in set dom Workshops and card dom Workshops > card dom Workshops~;
	
	--Register attendee to one workshop
	public RegisterAttendeeToWorkshop: User`UserName * Workshop`WorkshopName ==> ()
	RegisterAttendeeToWorkshop(user, workshop) == (
	  Workshops(workshop).Attendees := Workshops(workshop).Attendees union { user }
	)
	pre (
	 card Workshops(workshop).Attendees < Workshops(workshop).Vacancies
	 and not user in set Workshops(workshop).Attendees
	)
	post (
	  user in set Workshops(workshop).Attendees
	  and card Workshops(workshop).Attendees = card Workshops~(workshop).Attendees + 1 
	);
	
	-- Retrieve all workshops
	public GetAllWorkshops: () ==> set of Workshop
	GetAllWorkshops() == (
	   return rng Workshops
	)
	post (
	 Workshops = Workshops~
	 and RESULT = rng Workshops
	 );
	
	-- Retrieve all workshops at a given day
	public GetWorkshopsOfDay: Date ==> set of Workshop`WorkshopName
	GetWorkshopsOfDay(date) == (
	   return { workshop | workshop in set dom Workshops & date.Equals(Workshops(workshop).Date) }
	)
	post (
	   Workshops = Workshops~
	   and RESULT = { workshop | workshop in set dom Workshops & date.Equals(Workshops(workshop).Date) }
	);
	
	-- Retrive all workshops at a given time
	public GetWorkshopsAtTime: Time ==> set of Workshop`WorkshopName
	GetWorkshopsAtTime(time) == (
	   return { workshop | workshop in set dom Workshops & time.IsLaterThan(Workshops(workshop).Start) and time.IsEarlierThan(Workshops(workshop).End) }
	)
	post (
	   Workshops = Workshops~
	   and RESULT = { workshop | workshop in set dom Workshops & time.IsLaterThan(Workshops(workshop).Start) and time.IsEarlierThan(Workshops(workshop).End) }
	);
	
	-- Retrive all attendees of a given workshop
	public GetAttendeesOfWorkshop: Workshop`WorkshopName ==> set of User`UserName
	GetAttendeesOfWorkshop(workshop) == (
	   return Workshops(workshop).Attendees
	)
	pre workshop in set dom Workshops
	post (
	 Workshops = Workshops~
   and RESULT = Workshops(workshop).Attendees
	);
	
	-- Retrieve venue where workshop is taking place
	public GetVenueOfWorkshop: Workshop`WorkshopName ==> Venue`VenueName
	GetVenueOfWorkshop(workshop) == (
	   return Workshops(workshop).Venue
	)
	pre workshop in set dom Workshops
  post (
   Workshops = Workshops~
   and RESULT = Workshops(workshop).Venue
  );
	
	-- Retrieve subject of workshop
	public GetSubjectOfWorkshop: Workshop`WorkshopName ==> Workshop`WorkshopSubject
	GetSubjectOfWorkshop(workshop) == (
	   return Workshops(workshop).Subject
	)
	pre workshop in set dom Workshops
  post (
   Workshops = Workshops~
   and RESULT = Workshops(workshop).Subject
  );
	
	-- Retrieve company giving a specific workshop
	public GetCompanyOfWorkshop: Workshop`WorkshopName ==> Workshop`WorkshopCompany
  GetCompanyOfWorkshop(workshop) == (
     return Workshops(workshop).Company
  )
  pre workshop in set dom Workshops
  post (
   Workshops = Workshops~
   and RESULT = Workshops(workshop).Company
  );
	
	-- Publish a news arcticle about the event
	public PublishNewsArcticle: User`UserName * News`NewsTitle * News`NewsContent ==> ()
	PublishNewsArcticle(author, title, content) == (
		News := News ++ { title |-> new News(author, title, content) }
	)
	pre (
		author in set dom Attendees
		and title not in set dom News
	)
	post title in set dom News and card dom News > card dom News~;
	
	-- Publish a news arcticle about a conference
	public PublishNewsArcticleAboutConf: User`UserName * News`NewsTitle * News`NewsContent * Conference`ConfName ==> ()
	PublishNewsArcticleAboutConf(author, title, content, conf) == (
		News := News ++ { title |-> new News(author, title, content, conf) } 
	)
	pre (
		author in set dom Attendees
		and conf in set dom Conferences
		and title not in set dom News
	)
	post title in set dom News and card dom News > card dom News~;
	
	-- Retrieve all news arcticles 
	public GetAllNews: () ==> set of News
	GetAllNews() == (
		return rng News;
	)
	post News = News~;
	
	-- Retrieve all news arcticles about a specific conference
	public GetNewsAboutConf: Conference`ConfName ==> set of News
	GetNewsAboutConf(conf) == (
		return { news | news in set rng News & news.Conference = conf }; 
	)
	post News = News~;
	
	-- Retrieve all news arcticles written by a specific author
	public GetNewsByAuthor: User`UserName ==> set of News
	GetNewsByAuthor(author) == (
		return { news | news in set rng News & news.Author = author };
	)
	post News = News~;
end WebSummit