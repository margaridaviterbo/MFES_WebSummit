class WebSummitTest is subclass of TestBase
instance variables
	private TicketStock : WebSummit`WSTicketStock := { <Company> |-> 100, <Attendee> |-> 1000, <Volunteer> |-> 200 };
	private TicketPrice : WebSummit`WSTicketPrice := { <Company> |-> 500, <Attendee> |-> 250 };
	private WebSummit : WebSummit := new WebSummit(TicketStock, TicketPrice);
operations
	-- Test selling a ticket
	public TestSellTicket: () ==> ()
	TestSellTicket() == (
		WebSummit.SellTicket("João Silva", <Attendee>);
		AssertTrue(WebSummit.GetNumberOfAttendees() = 1);
		AssertTrue(WebSummit.GetAccountBalance() = TicketPrice(<Attendee>));
		WebSummit.SellTicket("Margarida Viterbo", <Company>);
		AssertTrue(WebSummit.GetNumberOfAttendees() = 2);
		AssertTrue(WebSummit.GetAccountBalance() = TicketPrice(<Attendee>) + TicketPrice(<Company>));
	);
	
	-- Test registering an attendee
	public TestRegisterAttendee: () ==> ()
	TestRegisterAttendee() == (
		WebSummit.RegisterAttendee("João Silva");
		AssertTrue(WebSummit.GetNumberOfRegisteredAttendees() = 1);
		AssertTrue(WebSummit.Attendees("João Silva").State = <Registered>);
	);

	-- Test adding a volunteer to the waiting list
	public TestAddToWaitingList: () ==> ()
	TestAddToWaitingList() == (
		WebSummit.AddToWaitingList("Joana Viterbo");
		AssertTrue(card WebSummit.WaitingList = 1);
	);
	
	-- Test accepting a volunteer
	public TestAcceptVolunteer: () ==> ()
	TestAcceptVolunteer() == (
	  WebSummit.AcceptVolunteer("Joana Viterbo");
	  AssertTrue(WebSummit.GetNumberOfAttendees() = 3);  
	); 
  
  -- Test scheduling a venue for the event
  public TestScheduleVenue: () ==> ()
  TestScheduleVenue() == (
  	WebSummit.ScheduleVenue("FIL 1", new Date(4,11,2017), new Date(9,11,2017), 10000);
  	AssertTrue(card dom WebSummit.Venues = 1);
  );
  
  -- Test adding a stage to a venue
  public TestAddStage: () ==> ()
  TestAddStage() == (
  	WebSummit.AddStage("FIL 1", "Main Stage");
  	AssertTrue(card dom WebSummit.Stages = 1);
  	AssertTrue(WebSummit.Stages("Main Stage").Venue = "FIL 1");
  );
  
  -- Test retrieve the venue of a stage
	public TestGetVenueOfStage: () ==> ()
	TestGetVenueOfStage() == (
		AssertTrue(WebSummit.GetVenueOfStage("Main Stage").Name = "FIL 1");
	);
  
  -- Test scheduling a conference for the event
  public TestScheduleConference: () ==> ()
  TestScheduleConference() == (
  	WebSummit.ScheduleConference("Main Stage", "Future Societies", new Date(4,11,2017), new Date(5,11,2017));
  	AssertTrue(card dom WebSummit.Conferences = 1);
  	AssertTrue(WebSummit.Conferences("Future Societies").Stage = "Main Stage");
  	WebSummit.ScheduleConference("Main Stage", "Money Conf", new Date(6,11,2017), new Date(7,11,2017));
  	AssertTrue(card dom WebSummit.Conferences = 2);
  	AssertTrue(WebSummit.Conferences("Money Conf").Stage = "Main Stage");
  );
  
  -- Test retrieve all the conferences of a day
	public TestGetConferencesOfDay: () ==> ()
	TestGetConferencesOfDay() == (
		AssertTrue(card WebSummit.GetConferencesOfDay(new Date(4,11,2017)) = 1);
		AssertTrue(card WebSummit.GetConferencesOfDay(new Date(6,11,2017)) = 1);
		AssertTrue(card WebSummit.GetConferencesOfDay(new Date(8,11,2017)) = 0);
	);
	
	-- Test retrieve stage where conference is taking place
	public TestGetConferenceStage: () ==> ()
	TestGetConferenceStage() == (
		AssertTrue(WebSummit.GetConferenceStage("Future Societies").Name = "Main Stage");
		AssertTrue(WebSummit.GetConferenceStage("Money Conf").Name = "Main Stage");
	);
	
	-- Test retrieve all the conferences taking place in a stage
	public TestGetConferencesInStage: () ==> ()
	TestGetConferencesInStage() == (
		AssertTrue(card WebSummit.GetConferencesInStage("Main Stage") = 2);
	);
	
	-- Retrieve all the conferences taking place in a stage in a given day
	public TestGetConferencesInStageOfDay: () ==> ()
	TestGetConferencesInStageOfDay() == (
		AssertTrue(card WebSummit.GetConferencesInStageOfDay("Main Stage", new Date(4,11,2017)) = 1);
		AssertTrue(card WebSummit.GetConferencesInStageOfDay("Main Stage", new Date(8,11,2017)) = 0);
	);
  
  -- Test scheduling a talk for a conference
  public TestScheduleTalk: () ==> ()
  TestScheduleTalk() == (
  	WebSummit.ScheduleTalk("Future Societies", "The City of the Future", 
  		"João Silva", new Date(4,11,2017), new Time(16,40), new Time(17,00));
  	AssertTrue(card dom WebSummit.Talks = 1);
  	AssertTrue(WebSummit.Talks("The City of the Future").Conference = "Future Societies");
  	WebSummit.ScheduleTalk("Future Societies", "Electric Cars: The Future",
  		"Margarida Viterbo", new Date(4,11,2017), new Time(17,05), new Time(17,25));
  	AssertTrue(card dom WebSummit.Talks = 2);
  	AssertTrue(WebSummit.Talks("Electric Cars: The Future").Conference = "Future Societies");
  );
  
  -- Test retrieve all talks of a specific day
  public TestGetTalksOfDay: () ==> ()
  TestGetTalksOfDay() == (
  	AssertTrue(card WebSummit.GetTalksOfDay(new Date(4,11,2017)) = 2);
  );
  
  -- Test retrieve talks happening at a specific hour of a day
  public TestGetTalksAtTime: () ==> ()
  TestGetTalksAtTime() == (
  	AssertTrue(card WebSummit.GetTalksAtTime(new Date(4,11,2017), new Time(17,10)) = 1);
  	AssertTrue(card WebSummit.GetTalksAtTime(new Date(4,11,2017), new Time(17,03)) = 0);
  );
  
  -- Test retrieve all the talks given by a speaker
  public TestGetTalksOfSpeaker: () ==> ()
  TestGetTalksOfSpeaker() == (
  	AssertTrue(card WebSummit.GetTalksOfSpeaker("João Silva") = 1);
  	AssertTrue(card WebSummit.GetTalksOfSpeaker("Margarida Viterbo") = 1);
  	AssertTrue(card WebSummit.GetTalksOfSpeaker("Joana Viterbo") = 0);
  	AssertTrue(card WebSummit.GetTalksOfSpeaker("xptonull") = 0);
  );
  
  -- Test retrieve all the talks from a specific conference for a specific day
  public TestGetConferenceTalksOfDay: () ==> ()
  TestGetConferenceTalksOfDay() == (
  	AssertTrue(card WebSummit.GetConferenceTalksOfDay("Future Societies", new Date(4,11,2017)) = 2);
  	AssertTrue(card WebSummit.GetConferenceTalksOfDay("Future Societies", new Date(5,11,2017)) = 0);
  );
  
  -- Test schedule a workshop
  public TestScheduleWorkshop: () ==> ()
  TestScheduleWorkshop() == (
  	WebSummit.AddStage("FIL 1", "Secondary Stage");
    WebSummit.ScheduleWorkshop("Managing DBs", "Databases", "Secondary Stage", "AWS", new Date(4,11,2017), new Time(17,05), new Time(17,35), 15);
    AssertTrue("Managing DBs" in set dom WebSummit.Workshops);
    AssertTrue(card dom WebSummit.Workshops = 1);
  );
  
  -- Test retrieve all workshops
  public TestGetAllWorkshops: () ==> ()
  TestGetAllWorkshops() == (
  	dcl workshops: set of Workshop := WebSummit.GetAllWorkshops();
  	AssertTrue(card workshops = 1);
  );
  
  -- Test retrieve all workshops of a given day
  public TestGetWorkshopsOfDay: () ==> ()
  TestGetWorkshopsOfDay() == (
  	AssertTrue(card WebSummit.GetWorkshopsOfDay(new Date(4,11,2017)) = 1);
  	AssertTrue(card WebSummit.GetWorkshopsOfDay(new Date(5,11,2018)) = 0);
  );
  
  -- Test retrieve workshops at a given time
  public TestGetWorkshopsAtTime: () ==> ()
  TestGetWorkshopsAtTime() == (
  	AssertTrue(card WebSummit.GetWorkshopsAtTime(new Time(17,05)) = 1);
  	AssertTrue(card WebSummit.GetWorkshopsAtTime(new Time(06,00)) = 0);
  );
  
  -- Test register attendee to a workshop
  public TestRegisterAttendeeToWorkshop: () ==> ()
  TestRegisterAttendeeToWorkshop() == (
  	WebSummit.RegisterAttendee("Margarida Viterbo");
  	AssertTrue(WebSummit.Attendees("Margarida Viterbo").State = <Registered>);
		WebSummit.RegisterAttendeeToWorkshop("Margarida Viterbo", "Managing DBs");
 		AssertTrue(card WebSummit.Workshops("Managing DBs").Attendees = 1);
   	AssertTrue("Margarida Viterbo" in set WebSummit.Workshops("Managing DBs").Attendees);
  );
  
  -- Test retrieve attendees of workshop
  public TestGetAttendeesOfWorkshop: () ==> ()
  TestGetAttendeesOfWorkshop() == (
  	AssertTrue(card WebSummit.GetAttendeesOfWorkshop("Managing DBs") = 1)
  );
  
  -- Test retrieve stage where workshop is taking place
	public TestGetStageOfWorkshop: () ==> ()
	TestGetStageOfWorkshop() == (
		AssertTrue(WebSummit.GetStageOfWorkshop("Managing DBs").Name = "Secondary Stage");
	);
	
	-- Test retrieve subject of workshop
	public TestGetSubjectOfWorkshop: () ==> ()
	TestGetSubjectOfWorkshop() == (
		AssertTrue(WebSummit.GetSubjectOfWorkshop("Managing DBs") = "Databases");
	);
	
	-- Test retrieve company giving a specific workshop
	public TestGetCompanyOfWorkshop: () ==> ()
	TestGetCompanyOfWorkshop() == (
		AssertTrue(WebSummit.GetCompanyOfWorkshop("Managing DBs") = "AWS");
	);
	
	-- Retrieve all the workshops taking place in a stage
	public TestGetWorkshopsInStage: () ==> ()
	TestGetWorkshopsInStage() == (
		AssertTrue(card WebSummit.GetWorkshopsInStage("Secondary Stage") = 1);
	);
	
	-- Test retrieve all the workshops taking place in a stage in a given day
	public TestGetWorkshopsInStageOfDay: () ==> ()
	TestGetWorkshopsInStageOfDay() == (
		AssertTrue(card WebSummit.GetWorkshopsInStageOfDay("Secondary Stage", new Date(4,11,2017)) = 1);
		AssertTrue(card WebSummit.GetWorkshopsInStageOfDay("Secondary Stage", new Date(5,11,2017)) = 0);
	);
	
	-- Test publish a news arcticle about the event
	public TestPublishNewsArcticle: () ==> ()
	TestPublishNewsArcticle() == (
		WebSummit.PublishNewsArcticle("João Silva", "Title", "Content");
		AssertTrue(card dom WebSummit.News = 1);
		AssertTrue(WebSummit.News("Title").Content = "Content");
	);
	
	-- Test publish a news arcticle about a conference
	public TestPublishNewsArcticleAboutConf: () ==> ()
	TestPublishNewsArcticleAboutConf() == (
		WebSummit.PublishNewsArcticleAboutConf("João Silva", "Title About Money Conf", "Content", "Money Conf");
		AssertTrue(card dom WebSummit.News = 2);
		AssertTrue(WebSummit.News("Title About Money Conf").Conference = "Money Conf");
		AssertTrue(WebSummit.News("Title About Money Conf").Content = "Content");
	);
	
	-- Test retrieve all news arcticles 
	public TestGetAllNews: () ==> ()
	TestGetAllNews() == (
		AssertTrue(card WebSummit.GetAllNews() = 2);
	);
	
	-- Test retrieve all news arcticles about a specific conference
	public TestGetNewsAboutConf: () ==> ()
	TestGetNewsAboutConf() == (
		AssertTrue(card WebSummit.GetNewsAboutConf("Money Conf") = 1);
	); 
	
	-- Test retrieve all news arcticles written by a specific author
	public TestGetNewsByAuthor: () ==> ()
	TestGetNewsByAuthor() == (
		AssertTrue(card WebSummit.GetNewsByAuthor("João Silva") = 2);
	);
  
	public Run: () ==> ()
	Run() == (
		TestSellTicket();
		TestRegisterAttendee();
		TestAddToWaitingList();
		TestAcceptVolunteer();
		TestScheduleVenue();
		TestAddStage();
		TestGetVenueOfStage();
		TestScheduleConference();
		TestGetConferencesOfDay();
		TestGetConferenceStage();
		TestGetConferencesInStage();
		TestGetConferencesInStageOfDay();
		TestScheduleTalk();
		TestGetTalksOfDay();
		TestGetTalksAtTime();
		TestGetTalksOfSpeaker();
		TestGetConferenceTalksOfDay();
		TestScheduleWorkshop();
		TestGetAllWorkshops();
		TestGetWorkshopsOfDay();
		TestGetWorkshopsAtTime();
		TestRegisterAttendeeToWorkshop();
		TestGetAttendeesOfWorkshop();
		TestGetStageOfWorkshop();
		TestGetSubjectOfWorkshop();
		TestGetCompanyOfWorkshop();
		TestGetWorkshopsInStage();
		TestGetWorkshopsInStageOfDay();
		TestPublishNewsArcticle();
		TestPublishNewsArcticleAboutConf();
		TestGetAllNews();
		TestGetNewsAboutConf();
		TestGetNewsByAuthor();
	);
		
	-- Failing tests; run one at a time --
	
	-- Trying to sell a ticket that is out of stock
	public TestSellOutOfStockTicket: () ==> ()
	TestSellOutOfStockTicket() == (
	   WebSummit.TicketStock := { <Company> |-> 100, <Attendee> |-> 0, <Volunteer> |-> 200 };
	   WebSummit.SellTicket("Margarida Viterbo", <Attendee>);
	);
	
	-- Trying to register an attendee already registered
	public TestRegisterAttendeeAlreadyRegistered: () ==> ()
	TestRegisterAttendeeAlreadyRegistered() == (
	   WebSummit.SellTicket("João Silva", <Attendee>);
	   WebSummit.RegisterAttendee("João Silva");
     WebSummit.RegisterAttendee("João Silva");
	);
	
	-- Trying to add an attendee as volunteer to waiting list
	public TestAddAttendeeToVolunteerWaitingList: () ==> ()
	TestAddAttendeeToVolunteerWaitingList() == (
	   WebSummit.SellTicket("João Silva", <Attendee>);
     WebSummit.RegisterAttendee("João Silva");
     WebSummit.AddToWaitingList("João Silva");
	);
	
	-- Trying to accept a volunteer that is not on the waiting list
	public TestAddVolunteerNotInWaitingList: () ==> ()
	TestAddVolunteerNotInWaitingList() == (
	   WebSummit.AcceptVolunteer("Margarida Viterbo");
	);
	
	-- Trying to add a stage to a venue that does not exist
	public TestAddStageToNullVenue: () ==> ()
	TestAddStageToNullVenue() == (
	   WebSummit.AddStage("FIL 1", "Money Conf");
	);
	
	-- Trying to add a stage that already exists to a venue
	public TestAddRepeatedStageToVenue: () ==> ()
	TestAddRepeatedStageToVenue() == (
	   WebSummit.ScheduleVenue("FIL 1", new Date(4,11,2017), new Date(5,11,2017), 1000);
	   WebSummit.AddStage("FIL 1", "Money Conf");
	   WebSummit.AddStage("FIL 1", "Money Conf");
	);
	
	-- Trying to schedule a venue with bad dates
	public TestScheduleVenueBadDates: () ==> ()
	TestScheduleVenueBadDates() == (
		WebSummit.ScheduleVenue("MEO Arena", new Date(4,11,2017), new Date(3,11,2017), 10000);
	);
	
	-- Trying to schedule a conference with bad dates
	public TestScheduleConferenceBadDates: () ==> ()
	TestScheduleConferenceBadDates() == (
		WebSummit.ScheduleVenue("MEO Arena", new Date(4,11,2017), new Date(9,11,2017), 10000);
		WebSummit.AddStage("MEO Arena", "Main Stage");
		WebSummit.ScheduleConference("Main Stage", "Panda Conf", new Date(4,11, 2016), new Date(5,11,2016));
	);
	
	-- Trying to schedule two conferences for the same venue at the same time
	public TestScheduleOverlappingConferences: () ==> ()
	TestScheduleOverlappingConferences() == (
		WebSummit.ScheduleVenue("MEO Arena", new Date(4,11,2017), new Date(9,11,2017), 10000);
		WebSummit.AddStage("MEO Arena", "Main Stage");
		WebSummit.ScheduleConference("Main Stage", "Future Societies", new Date(4,11,2017), new Date(5,11,2017));
		WebSummit.ScheduleConference("Main Stage", "Panda Conf", new Date(5,11,2017), new Date(6,11,2017));
	);
	
	-- Trying to schedule two talks at the same time for one conference
	public TestScheduleOverlappingTalks: () ==> ()
	TestScheduleOverlappingTalks() == (
		WebSummit.ScheduleVenue("MEO Arena", new Date(4,11,2017), new Date(9,11,2017), 10000);
		WebSummit.AddStage("MEO Arena", "Main Stage");
		WebSummit.ScheduleConference("Main Stage", "Future Societies", new Date(4,11,2017), new Date(5,11,2017));
		AssertTrue(WebSummit.Conferences("Future Societies").Stage = "Main Stage");
		WebSummit.SellTicket("João Silva", <Attendee>);
		WebSummit.SellTicket("Margarida Viterbo", <Attendee>);
		WebSummit.ScheduleTalk("Future Societies", "The City of the Future", 
  		"João Silva", new Date(4,11,2017), new Time(16,40), new Time(17,00));
  	WebSummit.ScheduleTalk("Future Societies", "Electric Cars: The Future",
  		"Margarida Viterbo", new Date(4,11,2017), new Time(16,55), new Time(17,15));
	);
	
	-- Trying to schedule a talk to a conference thas does not exist
	public TestScheduleTalkToNullConference: () ==> ()
	TestScheduleTalkToNullConference() == (
	   WebSummit.SellTicket("João Silva", <Attendee>);
	   WebSummit.ScheduleTalk("Future Societies", "The City of the Future", 
      "João Silva", new Date(4,11,2017), new Time(16,40), new Time(17,00));
	);
	
	-- Trying to schedule a talk with a speaker that is not an attendee
	public TestScheduleTalkWithNullSpeaker: () ==> ()
	TestScheduleTalkWithNullSpeaker() == (
	   WebSummit.ScheduleVenue("MEO Arena", new Date(4,11,2017), new Date(9,11,2017), 10000);
     WebSummit.AddStage("MEO Arena", "Main Stage");
     WebSummit.ScheduleConference("Main Stage", "Future Societies", new Date(4,11,2017), new Date(5,11,2017));
     AssertTrue(WebSummit.Conferences("Future Societies").Stage = "Main Stage");
     WebSummit.ScheduleTalk("Future Societies", "The City of the Future", 
      "João Silva", new Date(4,11,2017), new Time(16,40), new Time(17,00));
	);
	
	-- Trying to schedule talk to a conference to dates out of the conference dates
	public TestScheduleTalkOutOfConferenceDates: () ==> ()
	TestScheduleTalkOutOfConferenceDates() == (
	   WebSummit.ScheduleVenue("MEO Arena", new Date(4,11,2017), new Date(9,11,2017), 10000);
     WebSummit.AddStage("MEO Arena", "Main Stage");
     WebSummit.ScheduleConference("Main Stage", "Future Societies", new Date(4,11,2017), new Date(5,11,2017));
     AssertTrue(WebSummit.Conferences("Future Societies").Stage = "Main Stage");
     WebSummit.SellTicket("João Silva", <Attendee>);
     WebSummit.ScheduleTalk("Future Societies", "The City of the Future", 
      "João Silva", new Date(6,11,2017), new Time(16,40), new Time(17,00));
	);
	
	-- Trying to get the stage where a conference that does not exist is taking place
	public TestGetStageOfNullConf: () ==> (Stage)
	TestGetStageOfNullConf() == (
	   WebSummit.GetConferenceStage("Robots will end Human Race");
	);
	
	-- Trying to schedule a workshop that already exists
	public TestScheduleRepeatedWorkshops: () ==> ()
	TestScheduleRepeatedWorkshops() == (
	   WebSummit.ScheduleVenue("MEO Arena", new Date(4,11,2017), new Date(9,11,2017), 10000);
     WebSummit.AddStage("MEO Arena", "Main Stage");
     WebSummit.ScheduleWorkshop("Do More", "Management", "Main Stage", "Do It", 
      new Date(4,11,2017), new Time(16,40), new Time(17,00), 10);
     WebSummit.ScheduleWorkshop("Do More", "Management", "Main Stage", "Do It", 
      new Date(4,11,2017), new Time(17,10), new Time(17,30), 10);
	);
	
	-- Trying to schedule a workshop to a stage that does not exist
	public TestScheduleWorkshopToNullStage: () ==> ()
	TestScheduleWorkshopToNullStage() == (
	   WebSummit.ScheduleWorkshop("Do More", "Management", "Main Stage", "Do It", 
      new Date(4,11,2017), new Time(16,40), new Time(17,00), 10);
	);
	
	-- Trying to schedule a workshop to a date outside the stage date
	public TestScheduleWorkshopToClosedStage: () ==> ()
	TestScheduleWorkshopToClosedStage() == (
	   WebSummit.ScheduleVenue("MEO Arena", new Date(4,11,2017), new Date(9,11,2017), 10000);
     WebSummit.AddStage("MEO Arena", "Main Stage");
     WebSummit.ScheduleWorkshop("Do More", "Management", "Main Stage", "Do It", 
      new Date(3,11,2017), new Time(16,40), new Time(17,00), 10);
	);
	
	-- Trying to schedule a workshop to a stage not free
	public TestScheduleWorkshopToOccupiedStage: () ==> ()
	TestScheduleWorkshopToOccupiedStage() == (
	   WebSummit.ScheduleVenue("MEO Arena", new Date(4,11,2017), new Date(9,11,2017), 10000);
     WebSummit.AddStage("MEO Arena", "Main Stage");
     WebSummit.ScheduleWorkshop("Do More", "Management", "Main Stage", "Do It", 
      new Date(4,11,2017), new Time(16,40), new Time(17,00), 10);
     WebSummit.ScheduleWorkshop("Do ", "Management", "Main Stage", "Do It", 
      new Date(4,11,2017), new Time(16,50), new Time(17,10), 10);
	); 
	
	-- Trying to register attendee to full workshop
	public TestRegistereAttendeeToFullWorkshop: () ==> ()
	TestRegistereAttendeeToFullWorkshop() == (
	   WebSummit.ScheduleVenue("MEO Arena", new Date(4,11,2017), new Date(9,11,2017), 10000);
     WebSummit.AddStage("MEO Arena", "Main Stage");
     WebSummit.ScheduleWorkshop("Do More", "Management", "Main Stage", "Do It", 
      new Date(4,11,2017), new Time(16,40), new Time(17,00), 1);
     WebSummit.SellTicket("João Silva", <Attendee>);
     WebSummit.SellTicket("Margarida Viterbo", <Attendee>);
     WebSummit.RegisterAttendee("João Silva");
     WebSummit.RegisterAttendee("Margarida Viterbo");
     WebSummit.RegisterAttendeeToWorkshop("Margarida Viterbo", "Do More");
     WebSummit.RegisterAttendeeToWorkshop("João Silva", "Do More");
	);
	
	-- Trying to register attendee to wokshop to which his already registered
	public TestRegisterSameAttendeeToWorkshop: () ==> ()
	TestRegisterSameAttendeeToWorkshop() == (
	   WebSummit.ScheduleVenue("MEO Arena", new Date(4,11,2017), new Date(9,11,2017), 10000);
     WebSummit.AddStage("MEO Arena", "Main Stage");
     WebSummit.ScheduleWorkshop("Do More", "Management", "Main Stage", "Do It", 
      new Date(4,11,2017), new Time(16,40), new Time(17,00), 2);
     WebSummit.SellTicket("Margarida Viterbo", <Attendee>);
     WebSummit.RegisterAttendee("Margarida Viterbo");
     WebSummit.RegisterAttendeeToWorkshop("Margarida Viterbo", "Do More");
     WebSummit.RegisterAttendeeToWorkshop("Margarida Viterbo", "Do More");
	);
	
	-- Trying to register null attendee to workshop
	public TestRegisterNullAttendeeToWorkshop: () ==> ()
	TestRegisterNullAttendeeToWorkshop() == (
	   WebSummit.ScheduleVenue("MEO Arena", new Date(4,11,2017), new Date(9,11,2017), 10000);
     WebSummit.AddStage("MEO Arena", "Main Stage");
     WebSummit.ScheduleWorkshop("Do More", "Management", "Main Stage", "Do It", 
      new Date(4,11,2017), new Time(16,40), new Time(17,00), 2);
     WebSummit.RegisterAttendeeToWorkshop("Margarida Viterbo", "Do More");
	);
	
	-- Trying to register an attendee that is not registered in websummit to workshop
	public TestRegisterNonRegisteredAttendeeToWorkshop: () ==> ()
	TestRegisterNonRegisteredAttendeeToWorkshop() == (
	 WebSummit.ScheduleVenue("MEO Arena", new Date(4,11,2017), new Date(9,11,2017), 10000);
     WebSummit.AddStage("MEO Arena", "Main Stage");
     WebSummit.ScheduleWorkshop("Do More", "Management", "Main Stage", "Do It", 
      new Date(4,11,2017), new Time(16,40), new Time(17,00), 2);
     WebSummit.SellTicket("Margarida Viterbo", <Attendee>);
     WebSummit.RegisterAttendeeToWorkshop("Margarida Viterbo", "Do More");
	);
	
	-- Trying to get all attendees of null workshop
	public TestGetAttendeesOfNullWorkshop: () ==> (set of User`UserName)
	TestGetAttendeesOfNullWorkshop() == (
	   WebSummit.GetAttendeesOfWorkshop("Cooking");
	);
	
	-- Trying to get stage of null workshop
  public TestGetStageOfNullWorkshop: () ==> (Stage)
  TestGetStageOfNullWorkshop() == (
     WebSummit.GetStageOfWorkshop("Cooking");
  );
  
  -- Trying to get subject of null workshop
  public TestGetSubjectOfNullWorkshop: () ==> (Workshop`WorkshopSubject)
  TestGetSubjectOfNullWorkshop() == (
     WebSummit.GetSubjectOfWorkshop("Cooking");
  );
  
  -- Trying to get company of null workshop
  public TestGetCompanyOfNullWorkshop: () ==> (Workshop`WorkshopCompany)
  TestGetCompanyOfNullWorkshop() == (
     WebSummit.GetCompanyOfWorkshop("Cooking");
  );
	
	
end WebSummitTest