class WebSummitTest is subclass of TestBase
instance variables
	private TicketStock : WebSummit`WSTicketStock := { <Company> |-> 100, <Attendee> |-> 1000, <Volunteer> |-> 200 };
	private TicketPrice : WebSummit`WSTicketPrice := { <Company> |-> 500, <Attendee> |-> 250 };
	private WebSummit : WebSummit := new WebSummit(TicketStock, TicketPrice);
operations
	-- Test selling a ticket
	public TestSellTicket: () ==> ()
	TestSellTicket() == (
		WebSummit.SellTicket("João Silva", <Attendee>);
		AssertTrue(WebSummit.GetNumberOfAttendees() = 1);
		AssertTrue(WebSummit.GetAccountBalance() = TicketPrice(<Attendee>));
		WebSummit.SellTicket("Margarida Viterbo", <Company>);
		AssertTrue(WebSummit.GetNumberOfAttendees() = 2);
		AssertTrue(WebSummit.GetAccountBalance() = TicketPrice(<Attendee>) + TicketPrice(<Company>));
	);
	
	-- Test registering an attendee
	public TestRegisterAttendee: () ==> ()
	TestRegisterAttendee() == (
		WebSummit.RegisterAttendee("João Silva");
		AssertTrue(WebSummit.GetNumberOfRegisteredAttendees() = 1);
		AssertTrue(WebSummit.Attendees("João Silva").State = <Registered>);
	);

	-- Test adding a volunteer to the waiting list
	public TestAddToWaitingList: () ==> ()
	TestAddToWaitingList() == (
		WebSummit.AddToWaitingList("Joana Viterbo");
		AssertTrue(card WebSummit.WaitingList = 1);
	);
	
	-- Test accepting a volunteer
	public TestAcceptVolunteer: () ==> ()
	TestAcceptVolunteer() == (
	  WebSummit.AcceptVolunteer("Joana Viterbo");
	  AssertTrue(WebSummit.GetNumberOfAttendees() = 3);  
	); 
	
	-- Test registering a volunteer
	public TestRegisterVolunteer: () ==> ()
  TestRegisterVolunteer() == (
    WebSummit.RegisterVolunteer("Joana Viterbo");
    AssertTrue(WebSummit.GetNumberOfRegisteredAttendees() = 2);
    AssertTrue(WebSummit.Attendees("Joana Viterbo").State = <Registered>);
  );
  
  -- Test scheduling a venue for the event
  public TestScheduleVenue: () ==> ()
  TestScheduleVenue() == (
  	WebSummit.ScheduleVenue("FIL 1", new Date(4,11,2017), new Date(9,11,2017), 10000);
  	AssertTrue(card dom WebSummit.Venues = 1);
  );
  
  -- Test scheduling a conference for the event
  public TestScheduleConference: () ==> ()
  TestScheduleConference() == (
  	WebSummit.ScheduleConference("FIL 1", "Future Societies", new Date(4,11,2017), new Date(5,11,2017));
  	AssertTrue(card dom WebSummit.Conferences = 1);
  	AssertTrue(WebSummit.Conferences("Future Societies").Venue = "FIL 1");
  	WebSummit.ScheduleConference("FIL 1", "Money Conf", new Date(6,11,2017), new Date(7,11,2017));
  	AssertTrue(card dom WebSummit.Conferences = 2);
  	AssertTrue(WebSummit.Conferences("Money Conf").Venue = "FIL 1");
  );
  
  -- Test scheduling a talk for a conference
  public TestScheduleTalk: () ==> ()
  TestScheduleTalk() == (
  	WebSummit.ScheduleTalk("Future Societies", "The City of the Future", 
  		"João Silva", new Date(4,11,2017), new Time(16,40), new Time(17,00));
  	AssertTrue(card dom WebSummit.Talks = 1);
  	AssertTrue(WebSummit.Talks("The City of the Future").Conference = "Future Societies");
  	WebSummit.ScheduleTalk("Future Societies", "Electric Cars: The Future",
  		"Margarida Viterbo", new Date(4,11,2017), new Time(17,05), new Time(17,25));
  	AssertTrue(card dom WebSummit.Talks = 2);
  	AssertTrue(WebSummit.Talks("Electric Cars: The Future").Conference = "Future Societies");
  );
  
	public Run: () ==> ()
	Run() == (
		TestSellTicket();
		TestRegisterAttendee();
		TestAddToWaitingList();
		TestAcceptVolunteer();
		TestRegisterVolunteer();
		TestScheduleVenue();
		TestScheduleConference();
		TestScheduleTalk();
	);
	
	-- Failing tests; run one at a time --
	
	-- Trying to schedule a venue with bad dates
	public TestScheduleVenueBadDates: () ==> ()
	TestScheduleVenueBadDates() == (
		WebSummit.ScheduleVenue("MEO Arena", new Date(4,11,2017), new Date(3,11,2017), 10000);
	);
	
	-- Trying to schedule a conference with bad dates
	public TestScheduleConferenceBadDates: () ==> ()
	TestScheduleConferenceBadDates() == (
		WebSummit.ScheduleVenue("MEO Arena", new Date(4,11,2017), new Date(9,11,2017), 10000);
		WebSummit.ScheduleConference("MEO Arena", "Panda Conf", new Date(4,11, 2016), new Date(5,11,2016));
	);
	
	-- Trying to schedule two conferences for the same venue at the same time
	public TestScheduleOverlappingConferences: () ==> ()
	TestScheduleOverlappingConferences() == (
		WebSummit.ScheduleVenue("MEO Arena", new Date(4,11,2017), new Date(9,11,2017), 10000);
		WebSummit.ScheduleConference("MEO Arena", "Future Societies", new Date(4,11,2017), new Date(5,11,2017));
		WebSummit.ScheduleConference("MEO Arena", "Panda Conf", new Date(5,11,2017), new Date(6,11,2017));
	);
	
	-- Trying to schedule two talks at the same time for one conference
	public TestScheduleOverlappingTalks: () ==> ()
	TestScheduleOverlappingTalks() == (
		WebSummit.ScheduleVenue("MEO Arena", new Date(4,11,2017), new Date(9,11,2017), 10000);
		WebSummit.ScheduleConference("MEO Arena", "Future Societies", new Date(4,11,2017), new Date(5,11,2017));
		AssertTrue(WebSummit.Conferences("Future Societies").Venue = "MEO Arena");
		WebSummit.SellTicket("João Silva", <Attendee>);
		WebSummit.SellTicket("Margarida Viterbo", <Attendee>);
		WebSummit.ScheduleTalk("Future Societies", "The City of the Future", 
  		"João Silva", new Date(4,11,2017), new Time(16,40), new Time(17,00));
  	WebSummit.ScheduleTalk("Future Societies", "Electric Cars: The Future",
  		"Margarida Viterbo", new Date(4,11,2017), new Time(16,55), new Time(17,15));
	);
end WebSummitTest