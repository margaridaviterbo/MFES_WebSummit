/*
 * Time is a utility class to represent a specific time.
 * Some utility methods are also provided to aid with time comparison for the
 * purpose of allocating times for talks during conferences.
 */
class Time
instance variables
	public Hours: nat;
	public Minutes: nat;
operations
	public Time: nat * nat ==> Time
	Time(hours, minutes) == (
		Hours := hours;
		Minutes := minutes;
		return self;
	);
	
	pure public IsEarlierThan: Time ==> bool
	IsEarlierThan(other) == (
		if Hours < other.Hours then return true;
		if Hours = other.Hours and Minutes <= other.Minutes then return true;
		return false;
	);
	
	pure public IsLaterThan: Time ==> bool
	IsLaterThan(other) == (
		if Hours > other.Hours then return true;
		if Hours = other.Hours and Minutes >= other.Minutes then return true;
		return false;
	);
	
	pure static public DoOverlap: Time * Time * Time * Time ==> bool
	DoOverlap(start1, end1, start2, end2) == (
		return (
			(start1.IsEarlierThan(start2) and end1.IsLaterThan(start2))
			or
			(start2.IsEarlierThan(start1) and end2.IsLaterThan(start1))
		);
	)
	pre (
		start1.IsEarlierThan(end1) 
		and start2.IsEarlierThan(end2)
	);
end Time